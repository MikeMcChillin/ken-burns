// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var container, currentBackgroundPosition, demo, draggie, elem, image, img, mask, output, updateBackgroundPosition;
    img = new Image;
    image = $("#image");
    mask = $("#mask");
    container = $("#container");
    $(".container").imagesLoaded(function() {
      var imageHeight, imageWidth, maskHeight, maskWidth, positionMask, setContainerDimensions, setMaskDimensions;
      imageWidth = image.width();
      imageHeight = image.height();
      maskWidth = image.width() / 2;
      console.log("maskWidth: " + maskWidth);
      maskHeight = image.height() / 2;
      console.log("maskHeight: " + maskHeight);
      setMaskDimensions = function() {
        return mask.css({
          "width": maskWidth,
          "height": maskHeight
        });
      };
      setMaskDimensions();
      setContainerDimensions = function() {
        return container.css({
          "width": imageWidth + (maskWidth * 1),
          "height": imageHeight + (maskHeight * 1)
        });
      };
      setContainerDimensions();
      positionMask = function() {
        return mask.css({
          "left": "50%",
          "top": "50%",
          "margin-left": -0.5 * maskWidth,
          "margin-top": -0.5 * maskHeight
        });
      };
      return positionMask();
    });
    updateBackgroundPosition = function(dragEvent, draggieInstance, event, pointer) {
      var position;
      position = draggieInstance.position;
      mask.css({
        "background-position": position.x + "px " + position.y + "px"
      });
      return currentBackgroundPosition();
    };
    demo = document.querySelector("#mask");
    elem = demo.querySelector("#image");
    draggie = new Draggabilly(elem, {
      containment: "#container"
    });
    output = demo.querySelector("code");
    draggie.on("dragStart", function(draggieInstance, event, pointer) {
      return updateBackgroundPosition("DRAG START", draggieInstance, event, pointer);
    });
    draggie.on("dragMove", function(draggieInstance, event, pointer) {
      return updateBackgroundPosition("DRAG MOVE", draggieInstance, event, pointer);
    });
    draggie.on("dragEnd", function(draggieInstance, event, pointer) {
      return updateBackgroundPosition("DRAG END", draggieInstance, event, pointer);
    });
    currentBackgroundPosition = function() {
      return $("#background-position").text("background-position: " + mask.css("background-position"));
    };
    $("#animate").click(function(e) {
      e.preventDefault();
      return mask.toggleClass("animate");
    });
    $("#start").click(function(e) {
      var anim, startPosition;
      e.preventDefault();
      startPosition = $("#mask").css("background-position");
      anim = CSSAnimations.get("ken-burns");
      return anim.setKeyframe("0%", {
        "background-position": startPosition
      });
    });
    $("#middle").click(function(e) {
      var anim, midPosition;
      e.preventDefault();
      midPosition = $("#mask").css("background-position");
      anim = CSSAnimations.get("ken-burns");
      return anim.setKeyframe("50%", {
        "background-position": midPosition
      });
    });
    $("#end").click(function(e) {
      var anim, endPosition;
      e.preventDefault();
      endPosition = $("#mask").css("background-position");
      anim = CSSAnimations.get("ken-burns");
      return anim.setKeyframe("100%", {
        "background-position": endPosition
      });
    });
    $("#start").click(function(e) {
      e.preventDefault();
      return updateBackgroundPosition();
    });
    $("input[type='range']").change(function() {
      var unit, val, which;
      val = $(this).val();
      val = parseInt(val);
      which = $(this).attr("data-property");
      unit = $(this).attr("data-unit");
      $(this).attr("data-value", val);
      switch (which) {
        case "background-size":
          return mask.css({
            "background-size": "" + val + unit
          });
        case "animation-duration":
          return mask.css({
            "animation-duration": "" + val + unit
          });
        case "animation-delay":
          return mask.css({
            "animation-delay": "" + val + unit
          });
        case "animation-iteration-count":
          return mask.css({
            "animation-iteration-count": "" + val
          });
      }
    });
    $("input[type='text']").change(function() {
      var name, which;
      which = $(this).data("property");
      name = $(this).val();
      $(this).attr("data-value", val);
      switch (which) {
        case "animation-name":
          return mask.css({
            "animation-name": "" + name
          });
      }
    });
    $("select").change(function() {
      var value, which;
      which = $(this).data("property");
      value = $(this).val();
      $(this).attr("data-value", val);
      switch (which) {
        case "animation-timing-function":
          return mask.css({
            "animation-timing-function": "" + value
          });
      }
    });
    return $("a[data-property='animation-iteration-count']").click(function(e) {
      e.preventDefault();
      $(this).attr("data-value", val);
      return mask.css({
        "animation-iteration-count": "infinite"
      });
    });
  });

}).call(this);
