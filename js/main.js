// Generated by CoffeeScript 1.3.3

$(function() {
  var container, demo, draggie, elem, image, img, mask, maskClone, notify, output;
  img = new Image;
  image = $("#image");
  mask = $("#mask");
  maskClone = $("#mask-clone");
  container = $("#container");
  $(".container").imagesLoaded(function() {
    var imageHeight, imageWidth, maskHeight, maskWidth, positionMask, setContainerDimensions, setMaskDimensions;
    imageWidth = image.width();
    imageHeight = image.height();
    maskWidth = image.width() / 2;
    console.log("maskWidth: " + maskWidth);
    maskHeight = image.height() / 2;
    console.log("maskHeight: " + maskHeight);
    setMaskDimensions = function() {
      mask.css({
        "width": maskWidth,
        "height": maskHeight
      });
      return maskClone.css({
        "width": maskWidth,
        "height": maskHeight
      });
    };
    setMaskDimensions();
    setContainerDimensions = function() {
      return container.css({
        "width": imageWidth + (maskWidth * 1),
        "height": imageHeight + (maskHeight * 1)
      });
    };
    setContainerDimensions();
    positionMask = function() {
      mask.css({
        "left": "50%",
        "top": "50%",
        "margin-left": -1 * maskWidth,
        "margin-top": -1 * maskHeight
      });
      return maskClone.css({
        "left": "50%",
        "top": "50%",
        "margin-left": -0.5 * maskWidth,
        "margin-top": -0.5 * maskHeight
      });
    };
    return positionMask();
  });
  notify = function(dragEvent, draggieInstance, event, pointer) {
    var message, position;
    position = draggieInstance.position;
    message = dragEvent + "\n" + event.type + " at " + pointer.pageX + ", " + pointer.pageY + "\n" + "draggie position at " + position.x + ", " + position.y;
    return $("#wef").text(message);
  };
  demo = document.querySelector("#mask");
  elem = demo.querySelector("#image");
  draggie = new Draggabilly(elem, {
    containment: "#container"
  });
  output = demo.querySelector("code");
  draggie.on("dragStart", function(draggieInstance, event, pointer) {
    return notify("DRAG START", draggieInstance, event, pointer);
  });
  draggie.on("dragMove", function(draggieInstance, event, pointer) {
    return notify("DRAG MOVE", draggieInstance, event, pointer);
  });
  draggie.on("dragEnd", function(draggieInstance, event, pointer) {
    return notify("DRAG END", draggieInstance, event, pointer);
  });
  $("input[type='range']").change(function() {
    var unit, val, which;
    val = $(this).val();
    val = parseInt(val);
    which = $(this).attr("data-property");
    unit = $(this).attr("data-unit");
    $(this).attr("data-value", val);
    switch (which) {
      case "background-size":
        return image.css({
          "background-size": "" + val + unit
        });
      case "animation-duration":
        return image.css({
          "animation-duration": "" + val + unit
        });
      case "animation-delay":
        return image.css({
          "animation-delay": "" + val + unit
        });
      case "animation-iteration-count":
        return image.css({
          "animation-iteration-count": "" + val
        });
    }
  });
  $("input[type='text']").change(function() {
    var name, which;
    which = $(this).data("property");
    name = $(this).val();
    $(this).attr("data-value", val);
    switch (which) {
      case "animation-name":
        return image.css({
          "animation-name": "" + name
        });
    }
  });
  $("select").change(function() {
    var value, which;
    which = $(this).data("property");
    value = $(this).val();
    $(this).attr("data-value", val);
    switch (which) {
      case "animation-timing-function":
        return image.css({
          "animation-timing-function": "" + value
        });
    }
  });
  return $("a[data-property='animation-iteration-count']").click(function(e) {
    e.preventDefault();
    $(this).attr("data-value", val);
    return image.css({
      "animation-iteration-count": "infinite"
    });
  });
});
